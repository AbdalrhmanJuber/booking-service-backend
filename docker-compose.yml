version: "3.9"

services:
  # -------------------------------
  # üóÑÔ∏è PostgreSQL Database
  # -------------------------------
  postgres:
    image: postgres:15
    container_name: booking_service_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # -------------------------------
  # üßë‚Äçüíª Development Service (Hot Reload)
  # -------------------------------
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev        # ‚úÖ use the new dev stage
    container_name: booking_service_api_app_dev
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - .:/app               # ‚úÖ mount local source for live reload
      - /app/node_modules    # ‚úÖ prevent overwriting node_modules inside container
    command: npm run dev     # ‚úÖ runs ts-node-dev for hot reload

  # -------------------------------
  # üöÄ Production Service
  # -------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: booking_service_api_app
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      TEST_DB_NAME: ${TEST_DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT}
      BCRYPT_PASSWORD: ${BCRYPT_PASSWORD}
      SALT_ROUNDS: ${SALT_ROUNDS}

  # -------------------------------
  # üß™ Test Service
  # -------------------------------
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: booking_service_api_app_test
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: test
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${TEST_DB_NAME}
    command: sh -c "npm run migrate:test && npm run test"

# -------------------------------
# üíæ Volumes
# -------------------------------
volumes:
  postgres_data:

